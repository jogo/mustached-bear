#!/usr/bin/env python

# All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.


import argparse
import json
import os
import subprocess
import sys

import requests

"""
Clone/Fetch all openstack repos from git.openstack.org.

Pulls the following orgs: openstack openstack-dev and openstack-infra
"""

# TODO(jogo): convert to python3
# TODO(jogo): make organizations to track configurable


repos_not_on_master = []
repo_errors = []


def _get_git_uri(org, name):
    # Convert to git://git.openstack.org/openstack/tempest
    return "git://git.openstack.org/%s/%s" % (org, name)


def _ignore_org(org):
    return org in ['stackforge', 'stackforge-attic', 'openstack-attic']


def _update(uri, git_dir):
    print(uri)
    original = os.getcwd()
    os.chdir(git_dir)
    command = "git fetch origin"
    subprocess.call(command.split(' '))
    # get notes, fail silently
    command = ("git fetch origin "
               "refs/notes/review:refs/notes/review")
    subprocess.Popen(command.split(' '),
                     stderr=subprocess.PIPE).communicate()
    # If current branch is master, do git pull
    command = "git rev-parse --abbrev-ref HEAD"
    out = subprocess.check_output(command.split(' '))
    if "master\n" == out:
        # Don't do a git pull if local changes
        if subprocess.call("git diff --exit-code".split(' ')) is 0:
            # if needs a merge, fail
            if (subprocess.call("git pull --ff-only".split(' '))
               is not 0):
                # ff failed
                repo_errors.append(git_dir)
    else:
        # make a note of the current branch
        branch = out.strip()
        print("Branch: '%s'" % branch)
        repos_not_on_master.append(git_dir)
    os.chdir(original)


def main(create_org_dir):
    # List of all openstack repos
    r = requests.get("https://review.openstack.org:443/projects/")
    # strip off first few chars because 'the JSON response body starts with a
    # magic prefix line that must be stripped before feeding the rest of the
    # response body to a JSON parser'
    # https://review.openstack.org/Documentation/rest-api.html
    projects = json.loads(r.text[4:])
    original = os.getcwd()
    if not create_org_dir:
        _sanity_check(projects)
    try:
        for project in projects:
            org, name = split_org_name(project)
            uri = _get_git_uri(org, name)
            git_dir = os.path.join(org, name)

            if os.path.exists(git_dir):
                # If git_dir exists just run git pull/fetch
                _update(uri, git_dir)

            elif not _ignore_org(org):
                print(uri)
                command = "git clone %s %s" % (uri, git_dir)
                subprocess.call(command.split(' '))
    except (KeyboardInterrupt, SystemExit):
        os.chdir(original)
        raise
    finally:
        _print_issues(projects)


def _sanity_check(projects):
    """Make sure the correct org directories already exist."""
    orgs = set()

    for project in projects:
        org, _ = split_org_name(project)
        if not _ignore_org(org):
            orgs.add(org)

    for org in orgs:
        if not os.path.isdir(org):
            print("Directory '%s' does not exist, see help" % org)
            sys.exit(1)


def _print_issues(projects):
    if len(repos_not_on_master) > 0:
        print("Repositories not on master branch:")
    for repo in repos_not_on_master:
        print("- %s" % repo)

    if len(repo_errors) > 0:
        print("Errors pulling the following repositories:")
    for repo in repo_errors:
        print("- %s" % repo)

    # go over non ignored orgs and look for orphaned repos
    orgs = set()
    orphaned = []

    for project in projects:
        org, _ = split_org_name(project)
        orgs.add(org)
    for org in orgs:
        if not os.path.isdir(org):
            # directory doesn't exist
            continue
        directories = ['%s/%s' % (org, name) for name in
                       os.listdir('%s/' % org)]
        for directory in directories:
            if directory not in projects:
                orphaned.append(directory)
    if orphaned:
        print("the following directories have no upstream:")
        for orphan in orphaned:
            print("- %s" % orphan)


def split_org_name(project):
    org, name = project.split('/')
    return org, name


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Clone OpenStack repos")
    parser.add_argument('--force', '-f', action='store_true',
                        help='create organization directories if not found')
    args = parser.parse_args()
    main(args.force)
