#!/usr/bin/env python

import json
import os
import subprocess

import requests

"""
Clone/Fetch all openstack repos from git.o.o.

Pulls the following orgs: openstack openstack-dev and openstack-infra
"""

# TODO(jogo): convert to python3
# TODO(jogo): list local repos that aren't upstream (due to renames etc...)
# TODO(jogo): make organizations to track configurable


def _get_git_uri(name, org):
    # Convert to git://git.openstack.org/openstack/tempest
    return "git://git.openstack.org/%s/%s" % (org, name)


def _ignore_org(org):
    return org in ['stackforge', 'stackforge-attic', 'openstack-attic']


def _dir(name, org):
    return "%s/%s" % (org, name)


def main():
    # List of all openstack repos
    r = requests.get("https://review.openstack.org:443/projects/")
    # strip off first few chars because 'the JSON response body starts with a
    # magic prefix line that must be stripped before feeding the rest of the
    # response body to a JSON parser'
    # https://review.openstack.org/Documentation/rest-api.html
    projects = json.loads(r.text[4:])
    for project in projects:
        org, name = project.split('/')
        uri = _get_git_uri(name, org)
        git_dir = _dir(name, org)
        if os.path.exists(git_dir):
            print uri
            # If git_dir exists just run git fetch
            original = os.getcwd()
            os.chdir(git_dir)
            command = "git fetch origin"
            subprocess.call(command.split(' '))
            # get notes
            command = "git fetch origin refs/notes/review:refs/notes/review"
            subprocess.call(command.split(' '))
            # If current branch is master, do git pull
            command = "git rev-parse --abbrev-ref HEAD"
            out = subprocess.check_output(command.split(' '))
            if "master\n" == out:
                if subprocess.call("git diff --exit-code".split(' ')) is 0:
                    # Don't do a git pull if local changes
                    subprocess.call("git pull".split(' '))
            else:
                print("Branch: '%s'" % out.strip())

            os.chdir(original)
        elif not _ignore_org(org):
            print uri
            command = "git clone %s %s" % (uri, git_dir)
            subprocess.call(command.split(' '))


if __name__ == "__main__":
    main()
