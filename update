#!/usr/bin/env python3

#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.


import argparse
import json
import multiprocessing
import os
import queue
import shutil
import subprocess
import sys
import threading

import requests

"""
Clone/Fetch all openstack repos from git.openstack.org.

Pulls the following orgs: openstack openstack-dev and openstack-infra
"""

# TODO(jogo): generalize beyond just openstack

repos_not_on_master = []
repo_errors = []


class Project(object):
    def __init__(self, full_name):
        self.full_name = full_name
        self.org, self.name = self._split_org_name()
        self.git_uri = self._git_uri()

    def _split_org_name(self):
        try:
            org, name = self.full_name.split('/')
        except ValueError:
            print("Unable to split '%s' on '/'" % self.project)
        return org, name

    def _git_uri(self):
        # Convert to git://git.openstack.org/openstack/tempest
        return "git://git.openstack.org/%s/%s" % (self.org, self.name)

    def __eq__(self, other):
        return self.full_name == other.full_name

    def _update(self, git_dir):
        command = "git fetch origin"
        subprocess.call(command.split(' '), cwd=git_dir)
        # get notes, fail silently
        command = ("git fetch origin "
                   "refs/notes/review:refs/notes/review")
        subprocess.Popen(command.split(' '),
                         stderr=subprocess.PIPE, cwd=git_dir).communicate()
        # If current branch is master, do git pull
        command = "git rev-parse --abbrev-ref HEAD"
        out = subprocess.check_output(command.split(' '), cwd=git_dir).decode()
        if "master\n" == out:
            # Don't do a git pull if local changes
            command = "git diff --exit-code".split(' ')
            if subprocess.call(command, cwd=git_dir) is 0:
                # if needs a merge, fail
                command = "git pull --ff-only".split(' ')
                if (subprocess.call(command, cwd=git_dir)
                   is not 0):
                    # ff failed
                    repo_errors.append(git_dir)
        else:
            # make a note of the current branch
            branch = out.strip()
            print("Branch: '%s'" % branch)
            repos_not_on_master.append(git_dir)

    # TODO(jogo): fix output with concurrency
    def git(self):
        """Git Update/clone a project"""
        git_dir = os.path.join(self.org, self.name)

        if os.path.exists(git_dir):
            # If git_dir exists just run git pull/fetch
            print(self.git_uri)
            self._update(git_dir)

        elif not _ignore_org(self.org):
            print(self.git_uri)
            command = "git clone %s %s" % (self.uri, git_dir)
            subprocess.call(command.split(' '))


# TODO(jogo): make organizations to track configurable
def _ignore_org(org):
    return org in ['stackforge', 'stackforge-attic', 'openstack-attic']


def _sanity_check(projects):
    """Make sure the correct org directories already exist."""
    orgs = set()

    for project in projects:
        if not _ignore_org(project.org):
            orgs.add(project.org)

    for org in orgs:
        if not os.path.isdir(org):
            print("Directory '%s' does not exist, see help" % org)
            sys.exit(1)


def _get_orphaned(projects):
    # go over non ignored orgs and look for orphaned repos
    orgs = set()
    orphaned = []

    for project in projects:
        orgs.add(project.org)
    for org in orgs:
        if not os.path.isdir(org):
            # directory doesn't exist
            continue
        directories = [os.path.join(org, name) for name in
                       os.listdir(org) if
                       os.path.isdir(os.path.join(org, name))]
        for directory in directories:
            if Project(directory) not in projects:
                orphaned.append(directory)
    return orphaned


def _print_issues(projects):
    if len(repos_not_on_master) > 0:
        print("Repositories not on master branch:")
    for repo in repos_not_on_master:
        print("- %s" % repo)

    if len(repo_errors) > 0:
        print("Errors pulling the following repositories:")
    for repo in repo_errors:
        print("- %s" % repo)

    orphaned = _get_orphaned(projects)
    if orphaned:
        print("the following directories have been orphaned (no upstream):")
        for orphan in orphaned:
            print("- %s" % orphan)


def skip_project(project_name):
    """skip special projects

    Skip All-Users project Since we aren't interested in it
    """
    name = "All-Users"
    return project_name == name


def main(create_org_dir, delete_orphaned):
    def worker():
        """Thread worker."""
        while True:
            q.get().git()
            q.task_done()

    q = queue.Queue()
    num_worker_threads = multiprocessing.cpu_count()

    projects = []

    # List of all openstack repos
    r = requests.get("https://review.openstack.org:443/projects/")
    # strip off first few chars because 'the JSON response body starts with a
    # magic prefix line that must be stripped before feeding the rest of the
    # response body to a JSON parser'
    # https://review.openstack.org/Documentation/rest-api.html
    for name in json.loads(r.text[4:]):
        if skip_project(name):
            continue
        projects.append(Project(name))

    if not create_org_dir:
        _sanity_check(projects)

    if delete_orphaned:
        orphaned = _get_orphaned(projects)
        for orphan in orphaned:
            print("deleting repo: %s" % orphan)
            shutil.rmtree(orphan)
        sys.exit(0)

    try:
        for project in projects:
            q.put(project)

        print("Using %d threads" % num_worker_threads)
        for _ in range(num_worker_threads):
            t = threading.Thread(target=worker, daemon=True)
            t.start()

        q.join()
    except (KeyboardInterrupt, SystemExit):
        raise
    finally:
        _print_issues(projects)


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Clone OpenStack repos")
    parser.add_argument('--force', '-f', action='store_true',
                        help='create organization directories if not found')
    parser.add_argument('--delete', '-d', action='store_true',
                        help='Just delete orphaned repos')
    args = parser.parse_args()
    main(args.force, args.delete)
